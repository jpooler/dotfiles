==================
 
\033[1;31mfields\033[0m
 
fields() { head -n 1 "$1" | tr "\\t" "\\n" | nl -w1 | pr -t -2; }
 
\033[1;36mfields [FILE]\033[0m
 
Prints a 2-column, numbered list of the field names in the header line of a tab-separated text file

==================

\033[1;31misthere\033[0m

isthere() { if (($(grep -c -m 1 "$1" "$3"))); then echo "YES"; else echo "NO"; fi; }

\033[1;36misthere [PATTERN] in [FILE]\033[0m

The command is a little unusual. The "-m" option for grep stops the search after a specified number of matching lines. Here that number is 1, so grep stops looking after the first match. The "-c" option then returns "1". Also unusual is the IF part of this command, because it's in BASH arithmetic brackets, but there doesn't seem to be an IF test. The output will be "1" if grep finds the pattern, "0" if it doesn't. But where's the arithmetical test of that output? None is needed. BASH arithmetic can also be used as a kind of "truth test": ((0)) is false, and a non-zero expression like ((1)) is true.

The other slightly odd thing about isthere is that it looks for a pattern as the first argument ($1) within a file as the third argument ($3). That's because I like to write the word "in" between pattern and file, so "in" is the second argument and the function ignores it.

==================

\033[1;31mec2ssh\033[0m
 
ec2ssh() {ssh -C `aws ec2 describe-instances --filters "Name=tag:Name,Values=$1" "Name=instance-state-name,Values=running" --output text --query "Reservations[0].Instances[0].PublicIpAddress"`$2 $3 $4 $5 $6 $7 $8 $9 }
 
\033[1;36mec2ssh [AWSTAGNAME]\033[0m
 
This function opens and ssh connection to the PublicIPAddress of the first instance running instance that matches the specified tag.

==================

\033[1;31mvpnssh\033[0m
 
vpnssh() {
  if [[ $1 =~ ^i-.* ]]; then
    instance_ip=$(aws ec2 describe-instances --instance-ids $1 --query "Reservations[0].Instances[0].PrivateIpAddress" --output text)
  else
    instance_ip=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$1" "Name=instance-state-name,Values=running" --output text --query "Reservations[0].Instances[0].PrivateIpAddress")
  fi 
  ssh -C $instance_ip $2 $3 $4 $5 $6 $7 $8 $9
}
 
\033[1;36mvpnssh [INSTANCE_ID OR INSTANCE_IP]\033[0m
 
This function opens a connection to the PrivateIpAddress or a provided instance_id or instance_ip of an instance.

==================

\033[1;31masgssh\033[0m
 
asgssh() {
  if [ "$INDEX" == "" ]; then
    INDEX=0
  fi 
  ssh `aws ec2 describe-instances --filters "Name=tag:aws:autoscaling:groupName,Values=$1" "Name=instance-state-name,Values=running" --output text --query "Reservations[0].Instances[0].PrivateIpAddress"` $2 $3 $4 $5 $6 $7 $8 $9
}
 
\033[1;36masgssh [INDEX]\033[0m
 
This function opens a connection to the PrivateIpAddress of a specified node in an ASG. Defaults to the first node in the ASG.

==================

\033[1;31mchefssh\033[0m
 
chefssh() {
  if [[ $1 =~ ^i-.* ]]; then
    instance_ip=$(aws ec2 describe-instances --instance-ids $1 --query "Reservations[0].Instances[0].PrivateIpAddress" --output text)
  else
    instance_ip=$1
  fi 
  ssh -C -i ~/.ssh/chef-bootstrap-022916.pem ubuntu@$instance_ip $2 $3 $4 $5 $6 $7 $8 $9

}
 
\033[1;36mchefssh [INSTANCE_ID or INSTANCE_ID]\033[0m

This uses the chef bootstrap key to ssh to the PrivateIpAddress of an INSTANCE_ID or INSTANCE_IP.

==================

\033[1;31mawsacct\033[0m
 
awsacct() {omitting function details, because private to work}
 
\033[1;36mawsacct [AWSACCOUNT]\033[0m

This functon aliases aws-vault as a prefix to each command in aws, test-kitchen, kops, rake, pry, and terraform.

==================
